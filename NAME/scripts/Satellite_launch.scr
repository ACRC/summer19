#!/bin/bash
###!/bin/ksh
# wrapper script

# Run as:
# >> ./Satellite_launch.scr [options] start_date end_date NAME_files_directory Site Domain

# 5 essential inputs:
# start_date, end_date - date range for NAME run, expect these inputs in format "YYYY-MM-DD"
# NAME_files_directory - full directory path containing input NAME csv files
# Site                 - Site name for satellite data e.g. "GOSAT-BRAZIL" or "GOSAT-UK"
# Domain               - Domain of interest e.g. "SOUTHAMERICA" or "EUROPE"

# [options] include:
# -b - BackRun script to call. Default: ./BackRuns_satellite.scr
# -s - BackRun setup file to use. Default: ./BackRuns_Setup.txt
# -f - Folder Name for output. Default: Domain_Site_Height
# -l - level to start emitting less particles in NAME (assume won't reach surface). Default: 12
# -n - nthreads - number of parallel threads to run in NAME. Default: 1

# Expect input files in NAME directory named as *_"Date"-"ID".* or *_"Date".*
# e.g. GOSAT-BRAZIL_20120101-001.csv / GOSAT-BRAZIL_20120101-A.csv / GOSAT-BRAZIL_20120101.csv

## Default values ###
BackRunScript="BackRuns_satellite_general.scr"
SetupFile="BackRuns_Setup.txt"
LevelSplit=12
nthread=1
#####################


## Path to script files
#ScriptPath=$HOME/NAME_scripts
ScriptPath="$( dirname ${BASH_SOURCE[0]} )"

## Get optional arguments from command line
# From https://stackoverflow.com/questions/11742996/shell-script-is-mixing-getopts-with-positional-parameters-possible
# And https://www.ibm.com/developerworks/opensource/library/l-bash-parameters/index.html
while getopts ":b:s:f:l:n:" optname; do
case "$optname" in
    "b") BackRunScript=$OPTARG;;
	"s") SetupFile=$OPTARG;;
    "f") FolderName=$OPTARG;;
    "l") LevelSplit=$OPTARG;;
    "n") nthread=$OPTARG;;
esac
done

## Get parameters from command line (should be listed after optional arguments if specified)
input_start=${@:$OPTIND:1}
input_end=${@:$OPTIND+1:1}
NAMEPath=${@:$OPTIND+2:1}
Site=${@:$OPTIND+3:1}
Domain=${@:$OPTIND+4:1}

if [ -z $input_start ] || [ -z $input_end ] || [ -z $NAMEPath ] || [ -z $Site ] || [ -z $Domain ]
then
	echo "Start Date, End date, NAME directory, Site and Domain must be specified when running this script"
	exit 1
fi

echo
echo "Satellite_launch_general.scr inputs"
echo "Running Back Run script         : $BackRunScript"
echo "Using Back Run Setup file       : $SetupFile"
echo "Using NAME files from directory : $NAMEPath"
echo "Site and Domain                 : $Site, $Domain"
echo "Particle number split as level  : $LevelSplit"
echo "Number of threads               : $nthread"


# Dates which need different MaxAge (Days) values
# Changeover between Mk6 and Mk7 met data.
d1_M6="2013-04-29" # Start date of changeover is 2013-04-30 (inclusive)
d2_M6="2013-05-11" # End date of changeover is 2013-05-10 (inclusive)
d1_M6_s=$(date -d $d1_M6 +%s)
min_days_M6=19
# Changeover between Mk8 and Mk9 met data.
d1_M8="2015-08-24" # Start date of changeover is 2015-08-25 (inclusive)
d2_M8="2015-08-31" # End date of changeover is 2015-08-30 (inclusive)
d1_M8_s=$(date -d $d1_M8 +%s)
min_days_M8=24


# Using GNU date function to create dates of the correct format.
startdate=$(date -I -d $input_start) || exit -1
enddate=$(date -I -d $input_end) || exit -1

# Create Folder Name from Domain, Site and Height if not specified on command line
if [ -z $FolderName ]
then
	Height="column"
	FolderName=${Domain}_${Site}_${Height}
fi
echo "Folder Name                     : $FolderName"

d=$startdate
while [[ $d < $enddate ]]; do
    date_str=$(echo $d | sed -r 's/-//g') # Remove all '-' characters from date
    files=$(ls -v ${NAMEPath}/*${date_str}*)
    
    if [[ "$d" > "$d1_M6" ]] && [[ "$d" < "$d2_M6" ]]
    then
		d_s=$(date -d "$d - 1 day" +%s)
    	day_add=$(( ($d_s - $d1_M6_s) / 86400 ))
    	MaxAge_Days=$(( $min_days_M6 + $day_add ))
    	echo "Date $d is between $d1_M6 - $d2_M6 and a different MaxAge_Days value is needed: $MaxAge_Days"
    	#day_add=$(expr $day_add + 1)
    elif [[ "$d" > "$d1_M8" ]] && [[ "$d" < "$d2_M8" ]]
    then
    	d_s=$(date -d "$d - 1 day" +%s)
    	day_add=$(( ($d_s - $d1_M8_s) / 86400 ))
    	MaxAge_Days=$(( $min_days_M8 + $day_add ))
    	echo "Date $d is between $d1_M8 - $d2_M8 and a different MaxAge_Days value is needed: $MaxAge_Days"
    else
    	MaxAge_Days=30
    fi

    for filename in $files
    do
		${ScriptPath}/${BackRunScript} -s ${SetupFile} -n ${nthread} -l ${LevelSplit} -d ${MaxAge_Days} ${filename} ${Domain} ${FolderName}
    done
    d=$(date -I -d "$d + 1 day")
done

