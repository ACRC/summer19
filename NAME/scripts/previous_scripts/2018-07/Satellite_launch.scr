#!/bin/bash
###!/bin/ksh
# wrapper script

# Run as:
# >> ./Satellite_launch.scr [options] start_date end_date NAME_files_directory output_directory

# 4 essential inputs:
# start_date, end_date - date range for NAME run, expect these inputs in format "YYYY-MM-DD"
# NAME_files_directory - directory containing input NAME csv files
# output_directory - directory name to write output. Normally of the form "Domain"_"Site"_"Height"
#  e.g. "SOUTHAMERICA_GOSAT-BRAZIL_column" or "EUROPE_GOSAT-EUROPE_column". Should not have a trailing slash.

# [options] include:
# -s - BackRun script to call. Default: $HOME/NAME_scripts/BackRuns_satellite.scr
# -l - level to start emitting less particles in NAME (assume won't reach surface). Default: 12
# -n - nthreads - number of parallel threads to run in NAME. Default: 1


#ScriptPath=$HOME/NAME_scripts
ScriptPath="$( dirname ${BASH_SOURCE[0]} )"

## Default values
BackRunScript=BackRuns_satellite.scr
LevelSplit=12
nthread=1

# From https://stackoverflow.com/questions/11742996/shell-script-is-mixing-getopts-with-positional-parameters-possible
# And https://www.ibm.com/developerworks/opensource/library/l-bash-parameters/index.html
while getopts ":s:l:n:" optname; do
case "$optname" in
    "s") BackRunScript=$OPTARG;;
    "l") LevelSplit=$OPTARG;;
    "n") nthread=$OPTARG;;
esac
done

input_start=${@:$OPTIND:1}
input_end=${@:$OPTIND+1:1}
NAMEPath=${@:$OPTIND+2:1}
FolderName=${@:$OPTIND+3:1}

echo "Running Back Run script: $BackRunScript"
echo "Using NAME files from directory: $NAMEPath"
echo "Folder Name: $FolderName"
echo "Particle number split as level $LevelSplit"
echo "Number of threads: $nthread"

# Dates which need different MaxAge (Days) values - changeover between Mk6 and Mk7 met data.
d1="2013-04-29" # Start date of changeover is 2013-04-30 (inclusive)
d2="2013-05-11" # End date of changeover is 2013-05-10 (inclusive)
d1_s=$(date -d $d1 +%s)
min_days=19

# Using GNU date function to create dates of the correct format.
startdate=$(date -I -d $input_start) || exit -1
enddate=$(date -I -d $input_end) || exit -1

d=$startdate
while [[ $d < $enddate ]]; do
    date_str=$(echo $d | sed -r 's/-//g') # Remove all '-' characters
    files=$(ls -v ${NAMEPath}/*${date_str}*)
    
    if [[ "$d" > "$d1" ]] && [[ "$d" < "$d2" ]]
    then
	d_s=$(date -d "$d - 1 day" +%s)
    	day_add=$(( ($d_s - $d1_s) / 86400 ))
    	MaxAge_Days=$(( $min_days + $day_add ))
    	echo "Date $d is between $d1 - $d2 and a different MaxAge_Days value is needed: $MaxAge_Days"
    	#day_add=$(expr $day_add + 1)
    else
    	MaxAge_Days=30
    fi

    for filename in $files
    do
	# To create current_FP remove first part of filename separated by '_' and remove extension
	current_FP=$(echo $filename | rev | cut -d'_' -f 1 | rev | cut -d'.' -f 1)
	RunName=${FolderName}_${current_FP}
	${ScriptPath}/${BackRunScript} ${filename} ${RunName} ${FolderName} ${LevelSplit} ${nthread} ${MaxAge_Days}
    done
    d=$(date -I -d "$d + 1 day")
done

